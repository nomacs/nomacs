name: Linux workflow
on: 
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    name: build (${{ matrix.config.name }})
    strategy:
      matrix:
        config:
          - name: minimum-clang
            container: "ghcr.io/nomacs/ubuntu:24.04"
            cmake_flags: "-DENABLE_PLUGINS=OFF -DENABLE_OPENCV=OFF -DENABLE_RAW=OFF -DENABLE_TIFF=OFF -DENABLE_QUAZIP=OFF"
            env: "CC=clang CXX=clang++"
            appimage: false
          - name: minimum-gcc
            container: "ghcr.io/nomacs/ubuntu:24.04"
            cmake_flags: "-DENABLE_PLUGINS=OFF -DENABLE_OPENCV=OFF -DENABLE_RAW=OFF -DENABLE_TIFF=OFF -DENABLE_QUAZIP=OFF"
            env: "CC=gcc CXX=g++"
            appimage: true
          - name: default-clang
            container: "ghcr.io/nomacs/ubuntu:24.04"
            cmake_flags: ""
            env: "CC=clang CXX=clang++"
            appimage: false
          - name: default-gcc
            container: "ghcr.io/nomacs/ubuntu:24.04"
            cmake_flags: ""
            env: "CC=gcc CXX=g++"
            appimage: true

    container:
      image: ${{ matrix.config.container }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libexiv2-dev libraw-dev libopencv-dev cmake libtiff-dev build-essential ninja-build libgtest-dev qt6-tools-dev-tools qt6-base-dev qt6-tools-dev libqt6svg6-dev qt6-image-formats-plugins libgl-dev qt6-l10n-tools libquazip1-qt6-dev

      - name: CMake configure
        run: |
          mkdir ${GITHUB_WORKSPACE}/build
          cd ${GITHUB_WORKSPACE}/build
          ${{ matrix.config.env }} cmake -G Ninja ${{ matrix.config.cmake_flags }} ../ImageLounge

      - name: Build
        run: |
          cd ${GITHUB_WORKSPACE}/build
          ninja

      - name: Test
        run: |
          cd ${GITHUB_WORKSPACE}/build
          ninja check

      - name: Get Build Info
        id: get_version
        if: matrix.config.appimage
        run: |
          cd ${GITHUB_WORKSPACE}/build
          ARCH=$(uname --machine)
          OS=$(source /etc/lsb-release; echo $DISTRIB_ID-$DISTRIB_RELEASE)
          SHA=$(git rev-parse --short ${{ github.event.pull_request.head.sha || github.sha }})
          VERSION=$(cat DkVersion.h | grep NOMACS_VERSION_STR | sed 's/[^0-9\.]*//g')
          echo "VERSION=${VERSION}-${SHA}-${OS}-${ARCH}" >> $GITHUB_OUTPUT
          echo "ARCH=${ARCH}" >> $GITHUB_OUTPUT

      - name: AppImage
        if: matrix.config.appimage
        run: |
          cd ${GITHUB_WORKSPACE}/build
          ninja appimage
          mv -v nomacs-*.AppImage "nomacs-${{ steps.get_version.outputs.VERSION }}-${{ matrix.config.name }}.AppImage"

      - name: Upload Artifacts
        if: matrix.config.appimage
        uses: actions/upload-artifact@v4
        with:
          name: AppImage ${{ steps.get_version.outputs.ARCH }} ${{ matrix.config.name }}
          path: build/nomacs-*.AppImage
          retention-days: 30

  check:
    # Need to use newer clang-format
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'
    steps:
      - name: PR commits + 1
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"
      
      - name: Checkout PR branch and all PR commits
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}
      
      - name: Fetch the other branch with enough history for a common merge-base commit
        run: |
          git fetch origin ${{ github.event.pull_request.base.sha }}

      - name: Install dependencies
        run: |
          sudo apt-get install -y clang-format

      - name: Check clang-format
        run: |
          cd ${GITHUB_WORKSPACE}
          git clang-format --diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} 2>&1
      
      - name: Setup gersemi
        run: |
          python -m venv ~/.gersemi
          source ~/.gersemi/bin/activate
          pip install gersemi==0.21.0

      - name: Check gersemi
        run: |
          cd ${GITHUB_WORKSPACE}
          source ~/.gersemi/bin/activate
          ./scripts/format-cmake.sh --check --diff --quiet 2>&1

